<?xml version="1.0" encoding="utf-8"?>
<modification>
  <name>Modification Default</name>
  <code>default</code>
  <version>1.1</version>
  <author>OpenCart Ltd</author>
  <link>http://www.opencart.com</link>

  <file path="system/{engine,library}/{action,loader,config,language}*.php|system/library/template/template.php">
    <operation>
      <search regex="true"><![CDATA[~(require|include)(_once)?\(([^)]+)~]]></search>
      <add position="replace"><![CDATA[$1$2(modification($3)]]></add>
    </operation>
  </file>

  <file path="system/library/template/twig.php">
    <operation>
      <search><![CDATA[if (is_file($file)) {]]></search>
      <add position="replace"><![CDATA[if (defined('DIR_CATALOG') && is_file(DIR_MODIFICATION . 'admin/view/template/' . $filename . '.twig')) {	
                $code = file_get_contents(DIR_MODIFICATION . 'admin/view/template/' . $filename . '.twig');
            } elseif (is_file(DIR_MODIFICATION . 'catalog/view/theme/' . $filename . '.twig')) {
                $code = file_get_contents(DIR_MODIFICATION . 'catalog/view/theme/' . $filename . '.twig');
            } elseif (is_file($file)) {]]></add>
    </operation>
  </file> 

	<!-- Admin - Extension - Module Order Sorter -->
	<file path="admin/model/setting/modification.php">
		<operation>
			<search><![CDATA[public function getTotalModifications() {]]></search>
			<add position="before"><![CDATA[
    public function getNewSortOrder() {
        $sql = "SELECT sort_order FROM `" . DB_PREFIX . "modification_order` ORDER BY sort_order DESC LIMIT 1";
        $result = $this->db->query($sql);
        if ($result->num_rows > 0) {
            return (int)$result->row['sort_order'] + 1;
        }
        return null;
    }
			]]></add>
		</operation>
		<operation>
			<search><![CDATA[$this->db->query("INSERT INTO `" . DB_PREFIX . "modification` SET `extension_install_id` = '" . (int)$data['extension_install_id'] . "', `name` = '" . $this->db->escape($data['name']) . "', `code` = '" . $this->db->escape($data['code']) . "', `author` = '" . $this->db->escape($data['author']) . "', `version` = '" . $this->db->escape($data['version']) . "', `link` = '" . $this->db->escape($data['link']) . "', `xml` = '" . $this->db->escape($data['xml']) . "', `status` = '" . (int)$data['status'] . "', `date_added` = NOW()");]]></search>
			<add position="after"><![CDATA[
		$mod_id = $this->db->getLastId();
		$this->db->query("INSERT INTO `" . DB_PREFIX . "modification_order` SET `modification_id` = '" . (int)$mod_id . "', `extension_install_id` = '" . (int)$data['extension_install_id'] . "', `sort_order` = '0' ");
		$new_sort_order = $this->getNewSortOrder();
		if($new_sort_order) {
			$this->db->query("UPDATE `" . DB_PREFIX . "modification_order` SET `sort_order` = '" . (int)$new_sort_order . "' WHERE modification_id = '" . (int)$mod_id . "'");
		}
			]]></add>
		</operation>
		<operation>
			<search><![CDATA[public function deleteModification($modification_id) {]]></search>
			<add position="after"><![CDATA[		$this->db->query("DELETE FROM `" . DB_PREFIX . "modification_order` WHERE modification_id = '" . (int)$modification_id . "'");]]></add>
		</operation>
		<operation>
			<search><![CDATA[public function deleteModificationsByExtensionInstallId($extension_install_id) {]]></search>
			<add position="after"><![CDATA[		$this->db->query("DELETE FROM `" . DB_PREFIX . "modification_order` WHERE `extension_install_id` = '" . (int)$extension_install_id . "'");]]></add>
		</operation>
		<operation>
			<search><![CDATA[public function getModification(]]></search>
			<add position="before"><![CDATA[
	public function UpdateSorter($modification_id, $sort_order) {
		$this->db->query("UPDATE `" . DB_PREFIX . "modification_order` SET `sort_order` = '" . (int)$sort_order . "' WHERE modification_id = '" . (int)$modification_id . "'");
	}
			]]></add>
		</operation>
		<operation>
			<search><![CDATA[$sql = "SELECT * FROM `" . DB_PREFIX . "modification`";]]></search>
			<add position="before"><![CDATA[
		$strSql = "CREATE TABLE IF NOT EXISTS 
			`" . DB_PREFIX ."modification_order` (
			`modification_id` int(11) NOT NULL, 
			`extension_install_id` int(11) NOT NULL, 
			`sort_order` int(11) NOT NULL, 
			PRIMARY KEY (`modification_id`) 
			) DEFAULT CHARACTER SET utf8 COLLATE utf8_unicode_ci";
		$query = $this->db->query($strSql);
		$strSql = "DESCRIBE " . DB_PREFIX . "modification_order `sort_order`";
		$qu = $this->db->query($strSql);
		if ($qu->num_rows == 0) {
			$strSQL = "ALTER TABLE `" . DB_PREFIX ."modification_order` ADD `sort_order` int(11) CHARACTER SET utf8 COLLATE utf8_unicode_ci NOT NULL AFTER `modification_id`";
			$sqladd = $this->db->query($strSql);
		}
		$strSql = "INSERT IGNORE INTO `" . DB_PREFIX ."modification_order` ( 
			`modification_id`, 
			`extension_install_id` 
			) SELECT 
				`modification_id`, 
				`extension_install_id` 
			FROM `" . DB_PREFIX . "modification` 
			ORDER BY date_added ASC";
		$this->db->query($strSql);
			]]></add>
		</operation>
		<operation>
			<search><![CDATA[$sql = "SELECT * FROM `" . DB_PREFIX . "modification`";]]></search>
			<add position="after"><![CDATA[		$sql .= " AS m LEFT JOIN `" . DB_PREFIX . "modification_order` mo ON (m.modification_id = mo.modification_id)";]]></add>
		</operation>
		<operation>
			<search><![CDATA['author',]]></search>
			<add position="after"><![CDATA[			'sort_order',	]]></add>
		</operation>
		<operation>
			<search><![CDATA[if (isset($data['start']) || isset($data['limit'])) {]]></search>
			<add position="before"><![CDATA[
		if (isset($data['sort'])&&($data['sort'] == 'sort_order')) {
			$sql .= " , name " ;
			$sql .= isset($data['order'])&&($data['order'] == 'DESC') ? " ASC" : " DESC" ;
		}
			]]></add>
		</operation>
	</file>

	<file path="admin/view/template/marketplace/modification.twig">
		<operation>
			<search><![CDATA[<td class="text-right">{{ column_action }}</td>]]></search>
			<add position="before"><![CDATA[
                      <td class="text-left">
                      {% if sort == 'sort_order' %}
                        <a href="{{ sort_sort_order }}" class="{{ order|lower }}">{{ column_sort_order }}</a>
                      {% else %}
                        <a href="{{ sort_sort_order }}">{{ column_sort_order }}</a>
                      {% endif %}
                      </td>
			]]></add>
		</operation>
		<operation>
			<search><![CDATA[{{ modification.date_added }}</td>]]></search>
			<add position="after"><![CDATA[
			<td class="text-left">
				<a href="javascript:void(0);" data-toggle="sorting" >{{ modification.sort_order }}</a>
				<input type="hidden" name="sort_order" id="{{ modification.modification_id }}" value="{{ modification.sort_order }}" />
			</td>
			]]></add>
		</operation>
		<operation>
			<search><![CDATA[{{ footer }}]]></search>
			<add position="before"><![CDATA[<script src="/admin/view/javascript/module_order_sorter.js"></script>]]></add>
		</operation>
	</file>

	<file path="admin/controller/marketplace/modification.php">
		<operation>
			<search><![CDATA[public function refresh]]></search>
			<add position="before"><![CDATA[
			public function updateSorter() {
				$this->load->language( 'marketplace/modification');
				$this->load->model( 'setting/modification');
				$this->load->model( 'setting/modification');
				$json = array();
				if ($this->validate()) {
					$this->model_setting_modification->UpdateSorter($this->request->get['modification_id'], $this->request->get['sort_order']);
					$json['success'] = $this->language->get( 'text_success');
				} else {
					$json['error'] = $this->error;
				}
				$this->response->addHeader('Content-Type: application/json; charset=utf-8');
				$this->response->setOutput(json_encode($json));
			}
			]]></add>
		</operation>
		<operation>
			<search><![CDATA['author'          => $result['author'],]]></search>
			<add position="before"><![CDATA[				'sort_order' => $result['sort_order'] ? $result['sort_order'] : '0',]]></add>
		</operation>
		<operation>
			<search>
			<![CDATA[$data['sort_date_added'] = $this->url->link('marketplace/modification',]]></search>
			<add position="before"><![CDATA[
			$data['column_sort_order'] = $this->language->get('column_sort_order');
			$data['sort_warning'] = $this->language->get('sort_warning');
			$data['sort_sort_order'] = $this->url->link('marketplace/modification', 'user_token=' . $this->session->data['user_token'] . '&sort=sort_order' . $url, true);
			]]></add>
		</operation>
		<operation>
			<search><![CDATA[getModifications();]]></search>
			<add position="replace"><![CDATA[getModifications(array('sort'=>'sort_order', 'order'=>'ASC'));]]></add>
		</operation>
	</file>
	
	<file path="admin/language/en-gb/marketplace/modification.php">
		<operation>
			<search><![CDATA[// Text]]></search>
			<add position="after"><![CDATA[
$_['column_sort_order'] = "Order";
$_['sort_warning']     	= "OCMOD execution order has been changed. Do not forget to refresh the modifications' cache to apply changes!";
			]]></add>
		</operation>
	</file>

	<file path="admin/model/extension/module/modification_manager.php">
		<operation>
			<search><![CDATA[$this->db->query("INSERT INTO " . DB_PREFIX . "modification SET date_modified = NOW(), code = '" . $this->db->escape($data['code']) . "', name = '" . $this->db->escape($data['name']) . "', author = '" . $this->db->escape($data['author']) . "', version = '" . $this->db->escape($data['version']) . "', link = '" . $this->db->escape($data['link']) . "', xml = '" . $this->db->escape($data['xml']) . "', status = '" . (int)$data['status'] . "', date_added = NOW()");]]></search>
			<add position="after"><![CDATA[
		$mod_id = $this->db->getLastId();
		$strSql = "INSERT INTO `" . DB_PREFIX . "modification_order` SET `modification_id` = '" . (int)$mod_id . "', `extension_install_id` = '" . (int)$data['extension_install_id'] . "', `sort_order` = '0' ";
		$this->db->query($strSql);
			]]></add>
		</operation>
		<operation>
			<search><![CDATA[public function deleteModification($modification_id) {]]></search>
			<add position="after"><![CDATA[		$this->db->query("DELETE FROM `" . DB_PREFIX . "modification_order` WHERE modification_id = '" . (int)$modification_id . "'");]]></add>
		</operation>
		<operation>
			<search><![CDATA[public function getModification(]]></search>
			<add position="before"><![CDATA[
	public function UpdateSorter($modification_id, $sort_order) {
		$this->db->query("UPDATE `" . DB_PREFIX . "modification_order` SET `sort_order` = '" . (int)$sort_order . "' WHERE modification_id = '" . (int)$modification_id . "'");
	}
			]]></add>
		</operation>
		<operation>
			<search><![CDATA[$sql = "SELECT * FROM " . DB_PREFIX . "modification";]]></search>
			<add position="before"><![CDATA[
		$sql = "CREATE TABLE IF NOT EXISTS `" . DB_PREFIX ."modification_order` ( 
				`modification_id` int(11) NOT NULL, 
				`extension_install_id` int(11) NOT NULL, 
				`sort_order` int(11) NOT NULL, 
				PRIMARY KEY (`modification_id`) 
			) DEFAULT CHARACTER SET utf8 COLLATE utf8_unicode_ci";
		$query = $this->db->query($sql);
		$qu = $this->db->query("DESCRIBE " . DB_PREFIX . "modification_order `sort_order`");
		if ($qu->num_rows == 0) {
			$strSql = "ALTER TABLE `" . DB_PREFIX ."modification_order` 
				ADD `sort_order` int(11) 
				CHARACTER SET utf8 COLLATE utf8_unicode_ci NOT NULL 
				AFTER `modification_id`;";
			$sqladd = $this->db->query($strSql);
		}
		$strSql = "INSERT IGNORE INTO `" . DB_PREFIX ."modification_order` ( 
				`modification_id`, 
				`extension_install_id` 
			) SELECT 
				`modification_id`, 
				`extension_install_id` 
			  FROM `" . DB_PREFIX ."modification`";
		$this->db->query($strSql);
			]]></add>
		</operation>
		<operation>
			<search><![CDATA[$sql = "SELECT * FROM " . DB_PREFIX . "modification";]]></search>
			<add position="after"><![CDATA[		$sql .= " AS m LEFT JOIN `" . DB_PREFIX . "modification_order` mo ON (m.modification_id = mo.modification_id)";]]></add>
		</operation>
		<operation>
			<search><![CDATA['author',]]></search>
			<add position="after"><![CDATA[			'sort_order' => 'sort_order',]]></add>
		</operation>
		<operation>
			<search><![CDATA[if (isset($data['start']) || isset($data['limit'])) {]]></search>
			<add position="before"><![CDATA[
		if (isset($data['sort'])&&($data['sort'] == 'sort_order')) {
			$sql .= " , name " ;
			$sql .= isset($data['order'])&&($data['order'] == 'DESC') ? " ASC" : " DESC" ;
		}
			]]></add>
		</operation>
	</file>

	<file path="admin/view/template/extension/module/modification_manager/list.twig">
		<operation>
			<search><![CDATA[{{ column_date_modified }}</a></th>]]></search>
			<add position="after"><![CDATA[
                      <th class="text-left">
                        {% if sort == 'sort_order' %}
                          <a href="{{ sort_sort_order }}" class="{{ order|lower }}">{{ column_sort_order }}</a>
                        {% else %}
                          <a href="{{ sort_sort_order }}">{{ column_sort_order }}</a>
                        {% endif %}
                      </th>
			]]></add>
		</operation>
		<operation>
			<search><![CDATA[{{ modification.date_modified }}</td>]]></search>
			<add position="after"><![CDATA[
                      <td class="text-left">
                        <a href="javascript:void(0);" data-toggle="sorting" >{{ modification.sort_order }}</a>
                        <input type="hidden" name="sort_order" id="{{ modification.modification_id }}" value="{{ modification.sort_order }}" />
                      </td>
			]]></add>
		</operation>
		<operation>
			<search><![CDATA[{{ footer }}]]></search>
			<add position="before"><![CDATA[<script src="/admin/view/javascript/module_order_sorter.js"></script>]]></add>
		</operation>
	</file>
	<!-- END OF Admin - Extension - Module Order Sorter -->

	<!-- Admin - Extensions - Modification Manager -->
	<file path="admin/controller/marketplace/modification.php">
		<operation>
			<search><![CDATA[protected function validate(]]></search>
			<add position="before"><![CDATA[
	public function import() {
		$this->load->language('marketplace/modification');
		$this->load->model('extension/module/modification_manager');
		$import_files = glob(DIR_SYSTEM . '*.ocmod.xml');
		if ($import_files) {
			foreach($import_files as $file) {
				$xml = html_entity_decode(file_get_contents($file), ENT_QUOTES, 'UTF-8');
				$dom = new DOMDocument('1.0', 'UTF-8');
				$dom->preserveWhiteSpace = false;
				$dom->loadXml($xml);
				$data = array(
					'version' => '',
					'author' => '',
					'link' => '',
					'status' => 1
				);
				$data['xml'] = $xml;
				$data['name'] = $dom->getElementsByTagName('name')->item(0)->textContent;
				$data['code'] = $dom->getElementsByTagName('code')->item(0)->textContent;
				if ($dom->getElementsByTagName('version')->length) {
					$data['version'] = $dom->getElementsByTagName('version')->item(0)->textContent;
				}
				if ($dom->getElementsByTagName('author')->length) {
					$data['author'] = $dom->getElementsByTagName('author')->item(0)->textContent;
				}
				$this->model_extension_module_modification_manager->addModification($data);
				unlink($file);
			}
			$this->session->data['success'] = sprintf($this->language->get('text_delete_success'), count($import_files));
		}
		$url = '';
		if (isset($this->request->get['sort'])) {
			$url .= '&sort=' . $this->request->get['sort'];
		}
		if (isset($this->request->get['order'])) {
			$url .= '&order=' . $this->request->get['order'];
		}
		if (isset($this->request->get['page'])) {
			$url .= '&page=' . $this->request->get['page'];
		}
		$this->response->redirect($this->url->link('marketplace/modification', 'user_token=' . $this->session->data['user_token'] . $url));
	}
	
	public function download() {
        if (!$this->user->hasPermission('modify', 'marketplace/modification')) {
            $this->error['warning'] = $this->language->get('error_permission');
        }
        $url = '';
        if (isset($this->request->get['sort'])) {
            $url .= '&sort=' . $this->request->get['sort'];
        }
        if (isset($this->request->get['order'])) {
            $url .= '&order=' . $this->request->get['order'];
        }
        if (isset($this->request->get['page'])) {
            $url .= '&page=' . $this->request->get['page'];
        }
	    if (!empty($this->request->get['modification_id'])) {
            $this->load->model('extension/module/modification_manager');
            $modification_info = $this->model_extension_module_modification_manager->getModification($this->request->get['modification_id']);
            if (!$modification_info) return false;
            header('Content-type: text/xml');
            header('Content-Disposition: attachment; filename="' . $modification_info['code'] . '.xml"');
            $dom = new DOMDocument('1.0', 'UTF-8');
            $dom->preserveWhiteSpace = false;
            $dom->loadXml($modification_info['xml']);
            $dom->formatOutput = true;
            echo $dom->saveXML();
            exit;
        } elseif (!empty($this->request->get['file'])) {
            if (!headers_sent()) {
                $file = $this->request->get['file'];
                if ((substr($file, 0, 8) == 'catalog/') ||
                    (substr($file, 0, 6) == 'admin/') ||
                    (substr($file, 0, 7) == 'system/')) {
                    $filepath = DIR_MODIFICATION . $file;
                } else {
                    die('Error: Count not find path for file');
                }
                $protected_files = ['config.php'];
                if (file_exists($filepath) && !in_array(basename($file), $protected_files)) {
                    header('Content-Type: application/octet-stream');
                    header('Content-Disposition: attachment; filename="' . basename($file) . '"');
                    header('Expires: 0');
                    header('Cache-Control: must-revalidate, post-check=0, pre-check=0');
                    header('Pragma: public');
                    header('Content-Length: ' . filesize($filepath));
                    if (ob_get_level()) {
                        ob_end_clean();
                    }
                    readfile($filepath, 'rb');
                    exit();
                } else {
                    exit('Error: Could not find file ' . $filepath . '!');
                }
            }
        }
        $this->response->redirect($this->url->link('marketplace/modification', 'user_token=' . $this->session->data['user_token'] . $url));
	}
	
	public function add() {
		$this->load->language('marketplace/modification');
		$this->load->model('extension/module/modification_manager');
		if (($this->request->server['REQUEST_METHOD'] == 'POST') && $this->validateForm()) {
			$xml = html_entity_decode($this->request->post['xml'], ENT_QUOTES, 'UTF-8');
			$dom = new DOMDocument('1.0', 'UTF-8');
			$dom->preserveWhiteSpace = false;
			$dom->loadXml($xml);
			$data = array(
				'version' => '',
				'author' => '',
				'link' => '',
				'status' => 1
			);
			$data['xml'] = $xml;
			$data['name'] = $dom->getElementsByTagName('name')->item(0)->textContent;
			$data['code'] = $dom->getElementsByTagName('code')->item(0)->textContent;
			if ($dom->getElementsByTagName('version')->length) {
				$data['version'] = $dom->getElementsByTagName('version')->item(0)->textContent;
			}
			if ($dom->getElementsByTagName('author')->length) {
				$data['author'] = $dom->getElementsByTagName('author')->item(0)->textContent;
			}
			$this->model_extension_module_modification_manager->addModification($data);
			$modification_id = $this->db->getLastId();
			$this->session->data['success'] = $this->language->get('text_success');
			$this->response->redirect($this->url->link('marketplace/modification/edit', 'user_token=' . $this->session->data['user_token'] . $this->getListUrlParams(array('modification_id' => $modification_id)), true));
		}
		$this->getForm();
	}

	public function edit() {
		$this->load->language('marketplace/modification');
		$this->load->model('extension/module/modification_manager');
		
		if (($this->request->server['REQUEST_METHOD'] == 'POST') && !empty($this->request->get['modification_id']) && $this->validateForm()) {
			$xml = html_entity_decode(rawurldecode($this->request->post['xml']), ENT_QUOTES, 'UTF-8');

			$dom = new DOMDocument('1.0', 'UTF-8');
			$dom->preserveWhiteSpace = false;
			$dom->loadXml($xml);

			$data = array();

			$data['xml'] = $xml;

			$data['name'] = $dom->getElementsByTagName('name')->item(0)->textContent;

			$data['code'] = $dom->getElementsByTagName('code')->item(0)->textContent;

			if ($dom->getElementsByTagName('version')->length) {
				$data['version'] = $dom->getElementsByTagName('version')->item(0)->textContent;
			} else {
				$data['version'] = '';
			}

			if ($dom->getElementsByTagName('author')->length) {
				$data['author'] = $dom->getElementsByTagName('author')->item(0)->textContent;
			} else {
				$data['author'] = '';
			}

			if ($dom->getElementsByTagName('link')->length) {
				$data['link'] = $dom->getElementsByTagName('link')->item(0)->textContent;
			} else {
				$data['link'] = '';
			}

			$this->model_extension_module_modification_manager->editModification($this->request->get['modification_id'], $data);

			$url = $this->getListUrlParams(array('modification_id' => $this->request->get['modification_id']));

			if (isset($this->request->get['refresh'])) {
				$this->response->redirect($this->url->link('marketplace/modification/refresh', 'user_token=' . $this->session->data['user_token'] . $url, true));
			}

			if ($this->db->countAffected()) {
				$this->session->data['success'] = $this->language->get('text_success');

				$this->response->redirect($this->url->link('marketplace/modification/edit', 'user_token=' . $this->session->data['user_token'] . $url, true));
			}
		}

		$this->getForm();
	}

	public function getForm() {
		$data['heading_title'] = $this->language->get('heading_title');

		$data['text_enabled'] = $this->language->get('text_enabled');
		$data['text_disabled'] = $this->language->get('text_disabled');

		$data['button_save'] = $this->language->get('button_save');
		$data['button_refresh'] = $this->language->get('button_refresh');
		$data['button_cancel'] = $this->language->get('button_cancel');

		if (isset($this->error['warning'])) {
			$data['error_warning'] = $this->error['warning'];
		} elseif (!empty($this->error)) {
			$data['error_warning'] = $this->language->get('error_warning');
		} else {
			$data['error_warning'] = '';
		}

		if (isset($this->session->data['success'])) {
			$data['success'] = $this->session->data['success'];

			unset($this->session->data['success']);
		} else {
			$data['success'] = false;
		}

		if (isset($this->error['xml'])) {
			$data['error_xml'] = $this->error['xml'];
		}
		
		$urlParams = array();
		
		if (isset($this->request->get['modification_id'])) {
			$urlParams['modification_id'] = $this->request->get['modification_id'];
		}

		$url = $this->getListUrlParams($urlParams);

		$data['breadcrumbs'] = array();

		$data['breadcrumbs'][] = array(
			'text' => $this->language->get('text_home'),
			'href' => $this->url->link('common/dashboard', 'user_token=' . $this->session->data['user_token'], true)
		);

		$data['breadcrumbs'][] = array(
			'text' => $this->language->get('heading_title'),
			'href' => $this->url->link('marketplace/modification', 'user_token=' . $this->session->data['user_token'] . $url, true)
		);

		if (isset($this->request->get['modification_id'])) {
			$this->load->model('extension/module/modification_manager');

			$modification_info = $this->model_extension_module_modification_manager->getModification($this->request->get['modification_id']);
			if (!$modification_info) exit;

			$data['text_form'] = sprintf($this->language->get('text_edit'), $modification_info['name']);


			$data['action'] = $this->url->link('marketplace/modification/edit', '&modification_id=' . $modification_info['modification_id'] . '&user_token=' . $this->session->data['user_token'] . $url, true);

			$data['refresh'] = $this->url->link('marketplace/modification/edit', '&modification_id=' . $modification_info['modification_id'] . '&refresh=1&user_token=' . $this->session->data['user_token'] . $url, true);

			$this->document->setTitle($modification_info['name'] . ' ≫ ' . $data['heading_title']);
		} else {
			$data['text_form'] = $this->language->get('text_add');

			$data['refresh'] = false;

			$data['action'] = $this->url->link('marketplace/modification/add', 'user_token=' . $this->session->data['user_token'], true);

			$this->document->setTitle($data['heading_title']);
		}

		$data['cancel'] = $this->url->link('marketplace/modification', 'user_token=' . $this->session->data['user_token'] . $this->getListUrlParams(), true);

		$data['modification'] = array();

		if (!empty($modification_info)) {
			$data['modification']['status'] = $modification_info['status'];
		} else {
			$data['modification']['status'] = 0;
		}

		if (isset($this->request->post['xml'])) {
			$data['modification']['xml'] = html_entity_decode($this->request->post['xml'], ENT_QUOTES, 'UTF-8');
		} elseif (!empty($modification_info)) {
			$data['modification']['xml'] = $modification_info['xml'];
		} else {
			$data['modification']['xml'] = '';
		}

		$this->document->addStyle('view/javascript/codemirror/lib/codemirror.css');
		$this->document->addScript('view/javascript/codemirror/lib/codemirror.js');
		$this->document->addScript('view/javascript/codemirror/mode/xml/xml.js');

		$data['header'] = $this->load->controller('common/header');
		$data['column_left'] = $this->load->controller('common/column_left');
		$data['footer'] = $this->load->controller('common/footer');

		$this->response->setOutput($this->load->view('extension/module/modification_manager/form', $data));
	}

	private function validateForm() {
		if (!$this->user->hasPermission('modify', 'marketplace/modification')) {
			$this->error['warning'] = $this->language->get('error_permission');
		}

		$error = false;

		// Required
		if (empty($this->request->post['xml'])) {
			$error = $this->language->get('error_required');
		}

		// 2. Validate XML
		if (!$error) {
			$xml = html_entity_decode(rawurldecode($this->request->post['xml']), ENT_QUOTES, 'UTF-8');

			libxml_use_internal_errors(true);

			$dom = new DOMDocument('1.0', 'UTF-8');

			if(!$dom->loadXml(html_entity_decode($xml, ENT_QUOTES, 'UTF-8'))){

			    foreach (libxml_get_errors() as $error) {
			        $msg = '';

			        switch ($error->level) {
			            case LIBXML_ERR_WARNING :
			                $msg .= "Warning $error->code: ";
			                break;
			            case LIBXML_ERR_ERROR :
			                $msg .= "Error $error->code: ";
			                break;
			            case LIBXML_ERR_FATAL :
			                $msg .= "Fatal Error $error->code: ";
			                break;
			        }

			        $msg .= trim ( $error->message ) . "\nLine: $error->line";

			        $error = $msg;
			    }

			    libxml_clear_errors();
			}

			libxml_use_internal_errors(false);
		}

		// 3. Required tags
		if (!$error && (!$dom->getElementsByTagName('name') || $dom->getElementsByTagName('name')->length == 0 || $dom->getElementsByTagName('name')->item(0)->textContent == '')) {
			$error = $this->language->get('error_name');
		}

		if (!$error && (!$dom->getElementsByTagName('code') || $dom->getElementsByTagName('code')->length == 0 || $dom->getElementsByTagName('code')->item(0)->textContent == '')) {
			$error = $this->language->get('error_code');
		}

		// 4. Check code isn't duplicate
		if (!$error) {
			$code = $dom->getElementsByTagName('code')->item(0)->textContent;

			$this->load->model('extension/module/modification_manager');
			
			$modification_info = $this->model_extension_module_modification_manager->getModificationByCode($code);

			if ($modification_info && (!isset($this->request->get['modification_id']) || $modification_info['modification_id'] != $this->request->get['modification_id'])) {
				$error = sprintf($this->language->get('error_exists'), $modification_info['name'], $modification_info['code']);
			}
		}

		if ($error) {
			$this->error['xml'] = $error;
		}

		return !$this->error;
	}

	static function modifiedFiles($dir, $dirLen = 0) {
		$tree = glob(rtrim($dir, '/') . '/*');
		if (!$dirLen) {
			$dirLen = strlen($dir);
		}
		$files = array();

	    if (is_array($tree)) {
	        foreach($tree as $file) {
	        	if ($file == $dir . 'index.html') {
					continue;
				} elseif (is_file($file)) {
	                $files[] = substr($file, $dirLen);
	            } elseif (is_dir($file)) {
	                $files = array_merge($files, self::modifiedFiles($file, $dirLen));
	            }
	        }
	    }

	    return $files;
	}

	protected function getListUrlParams(array $params = array()) {
		if (isset($params['sort'])) {
			$params['sort'] = $params['sort'];
		} elseif (isset($this->request->get['sort'])) {
			$params['sort'] = $this->request->get['sort'];
		}

		if (isset($params['order'])) {
			$params['order'] = $params['order'];
		} elseif (isset($this->request->get['order'])) {
			$params['order'] = $this->request->get['order'];
		}

		if (isset($params['filter_name'])) {
			$params['filter_name'] = urlencode(html_entity_decode($params['filter_name'], ENT_QUOTES, 'UTF-8'));
		} elseif (isset($this->request->get['filter_name'])) {
			$params['filter_name'] = urlencode(html_entity_decode($this->request->get['filter_name'], ENT_QUOTES, 'UTF-8'));
		}

		if (isset($params['filter_author'])) {
			$params['filter_author'] = urlencode(html_entity_decode($params['filter_author'], ENT_QUOTES, 'UTF-8'));
		} elseif (isset($this->request->get['filter_author'])) {
			$params['filter_author'] = urlencode(html_entity_decode($this->request->get['filter_author'], ENT_QUOTES, 'UTF-8'));
		}

		if (isset($params['filter_xml'])) {
			$params['filter_xml'] = urlencode(html_entity_decode($params['filter_xml'], ENT_QUOTES, 'UTF-8'));
		} elseif (isset($this->request->get['filter_xml'])) {
			$params['filter_xml'] = urlencode(html_entity_decode($this->request->get['filter_xml'], ENT_QUOTES, 'UTF-8'));
		}

		if (isset($params['page'])) {
			$params['page'] = $params['page'];
		} elseif (isset($this->request->get['page'])) {
			$params['page'] = $this->request->get['page'];
		}

		$paramsJoined = array();

		foreach($params as $param => $value) {
			$paramsJoined[] = "$param=$value";
		}

		return '&' . implode('&', $paramsJoined);
	}

	protected function getModificationXmlFiles($filter = array()) {
		$return = array();

		$baseLen = strlen(substr(DIR_SYSTEM, 0, -7));

		$xml = array();

		$xml[] = file_get_contents(DIR_SYSTEM . 'modification.xml');

		$files = glob(DIR_SYSTEM . '*.ocmod.xml');

		if ($files) {
			foreach ($files as $file) {
				$xml[] = file_get_contents($file);
			}
		}
		
		$results = $this->model_extension_module_modification_manager->getModifications($filter);

		foreach ($results as $result) {
			if ($result['status']) {
				$xml[] = $result['xml'];
			}
		}

		foreach ($xml as $xml) {
			if (empty($xml)){
				continue;
			}

			$dom = new DOMDocument('1.0', 'UTF-8');
			$dom->preserveWhiteSpace = false;
			$dom->loadXml($xml);

			$files = $dom->getElementsByTagName('modification')->item(0)->getElementsByTagName('file');

			foreach ($files as $file) {
				$operations = $file->getElementsByTagName('operation');

				$file_error = $file->getAttribute('error');

				$files = explode('|', $file->getAttribute('path'));

				foreach ($files as $file) {
					$path = '';

					// Get the full path of the files that are going to be used for modification
					if ((substr($file, 0, 7) == 'catalog')) {
						$path = DIR_CATALOG . substr($file, 8);
					}

					if ((substr($file, 0, 5) == 'admin')) {
						$path = DIR_APPLICATION . substr($file, 6);
					}

					if ((substr($file, 0, 6) == 'system')) {
						$path = DIR_SYSTEM . substr($file, 7);
					}

					if ($path) {
						$files = glob($path, GLOB_BRACE);

						if ($files) {
							foreach ($files as $file) {
								$file = substr($file, $baseLen);

								if (!isset($return[$file])) {
									$return[$file] = array();
								}

								if ($dom->getElementsByTagName('code')->length) {
									$code = $dom->getElementsByTagName('code')->item(0)->textContent;
								} else {
									continue;
								}

								if (!empty($return[$file])) {
									foreach ($return[$file] as $return_file) {
										if ($return_file['code'] == $code) {
											continue 2;
										}
									}
								}

								if ($dom->getElementsByTagName('name')->length) {
									$name = $dom->getElementsByTagName('name')->item(0)->textContent;
								} else {
									continue;
								}

								if ($dom->getElementsByTagName('author')->length) {
									$author = $dom->getElementsByTagName('author')->item(0)->textContent;
								} else {
									$author = '';
								}

								$return[$file][] = array(
									'code' => $code,
									'name' => $name,
									'author' => $author
								);
							}
						}
					}
				}
			}
		}
		return $return;
	}
			]]></add>
		</operation>
		<operation>
			<search><![CDATA[$this->load->model('setting/modification');]]></search>
			<add position="after"><![CDATA[
			if (file_exists(DIR_APPLICATION . 'model/extension/module/modification_manager.php')) {
				$this->load->model('extension/module/modification_manager');
			}]]></add>
		</operation>
		<operation>
			<search index="0"><![CDATA[$sort = 'name';]]></search>
			<add position="replace"><![CDATA[$sort = 'date_modified';]]></add>
		</operation>
		<operation>
			<search index="0"><![CDATA[$order = 'ASC';]]></search>
			<add position="replace"><![CDATA[$order = 'DESC';]]></add>
		</operation>
		<operation>
			<search index="0"><![CDATA[$handle = fopen(DIR_LOGS . 'ocmod.log', 'w+');]]></search>
			<add position="after"><![CDATA[
      fclose($handle);			
			$handle = fopen(DIR_LOGS . 'ocmod_error.log', 'w+');
			]]></add>
		</operation>
		<operation>
			<search index="0"><![CDATA[$maintenance = $this->config->get('config_maintenance');]]></search>
			<add position="after"><![CDATA[
			$handle = fopen(DIR_LOGS . 'ocmod.log', 'w+');
			fclose($handle);
			$handle = fopen(DIR_LOGS . 'ocmod_error.log', 'w+');
			fclose($handle);
			$directories = glob(DIR_CACHE . '*', GLOB_ONLYDIR);
			if ($directories) {
				foreach ($directories as $directory) {
                    foreach(new DirectoryIterator($directory) as $fileToDelete) {
                        if ($fileToDelete->isDot()) continue;
                        if ($fileToDelete->isFile()) {
                            unlink($fileToDelete->getPathName());
                        } elseif ($fileToDelete->isDir()) {
                            foreach(new DirectoryIterator($fileToDelete->getPathName()) as $fileToDelete) {
                                if ($fileToDelete->isDot()) continue;
                                if ($fileToDelete->isFile()) {
                                    unlink($fileToDelete->getPathName());
                                }
                            }
                        }
                    }
				}
			}
			]]></add>
		</operation>
		<operation>
			<search index="0"><![CDATA[$data['breadcrumbs'] = array();]]></search>
			<add position="before"><![CDATA[
		if (file_exists(DIR_APPLICATION . 'model/extension/module/modification_manager.php')) {
			$this->load->model('extension/module/modification_manager');
			if (isset($this->request->get['filter_name'])) {
				$filter_name = $this->request->get['filter_name'];
			} else {
				$filter_name = null;
			}
			if (isset($this->request->get['filter_xml'])) {
				$filter_xml = $this->request->get['filter_xml'];
			} else {
				$filter_xml = null;
			}
			if (isset($this->request->get['filter_author'])) {
				$filter_author = $this->request->get['filter_author'];
			} else {
				$filter_author = null;
			}
			$url = $this->getListUrlParams();
			$data['add'] = $this->url->link('marketplace/modification/add', 'user_token=' . $this->session->data['user_token'] . $url, true);
			$data['clear_log'] = $this->url->link('marketplace/modification/clearlog', 'user_token=' . $this->session->data['user_token'] . $url, true);
			$data['filter_action'] = $this->url->link('marketplace/modification', 'user_token=' . $this->session->data['user_token'], true);
			$data['reset_url'] = $this->url->link('marketplace/modification', 'user_token=' . $this->session->data['user_token'], true);
			$data['import_url'] = false;
			$import_files = glob(DIR_SYSTEM . '*.ocmod.xml');
			if ($import_files && count($import_files)) {
				$data['import_url'] = $this->url->link('marketplace/modification/import', 'user_token=' . $this->session->data['user_token'], true);
			}
			$data['tab_files'] = $this->language->get('tab_files');
			$data['tab_error'] = $this->language->get('tab_error');
		}
			]]></add>
		</operation>
		<operation>
			<search index="0"><![CDATA[$data['sort_name'] =]]></search>
			<add position="before"><![CDATA[
		if (isset($this->request->get['filter_name'])) {
			$url .= '&filter_name=' . urlencode(html_entity_decode($this->request->get['filter_name'], ENT_QUOTES, 'UTF-8'));
		}
		if (isset($this->request->get['filter_author'])) {
			$url .= '&filter_author=' . urlencode(html_entity_decode($this->request->get['filter_author'], ENT_QUOTES, 'UTF-8'));
		}
		if (isset($this->request->get['filter_xml'])) {
			$url .= '&filter_xml=' . urlencode(html_entity_decode($this->request->get['filter_xml'], ENT_QUOTES, 'UTF-8'));
		}
		$data['sort_date_modified'] = $this->url->link('marketplace/modification', 'user_token=' . $this->session->data['user_token'] . '&sort=date_modified' . $url, true);
			]]></add>
		</operation>
		<operation>
			<search index="0"><![CDATA[$filter_data = array(]]></search>
			<add position="after"><![CDATA[
			'filter_name'	  => $filter_name,
			'filter_author'	=> $filter_author,
			'filter_xml'	  => $filter_xml,
			]]></add>
		</operation>
		<operation>
			<search index="0"><![CDATA[$modification_total = $this->model_setting_modification->getTotalModifications();]]></search>
			<add position="replace"><![CDATA[$modification_total = $this->model_extension_module_modification_manager->getTotalModifications($filter_data);]]></add>
		</operation>
		<operation>
			<search index="0"><![CDATA[$data['modifications'][] = array(]]></search>
			<add position="after"><![CDATA[
				'date_modified' 	=> $result['date_modified'] && $result['date_modified'] != '0000-00-00 00:00:00' ? date(date('Ymd') == date('Ymd', strtotime($result['date_modified'])) ? $this->language->get('datetime_format') : $this->language->get('datetime_format'), strtotime($result['date_modified'])) : date($this->language->get('datetime_format'), strtotime($result['date_added'])),
				'edit' 						=> (file_exists(DIR_APPLICATION . 'model/extension/module/modification_manager.php')) ? $this->url->link('marketplace/modification/edit', 'user_token=' . $this->session->data['user_token'] . '&modification_id=' . $result['modification_id'] . $url, true) : '',
				'download' 				=> $this->url->link('marketplace/modification/download', 'user_token=' . $this->session->data['user_token'] . '&modification_id=' . $result['modification_id'] . $url, true),
			]]></add>
		</operation>
		<operation>
			<search index="0"><![CDATA[$pagination =]]></search>
			<add position="before"><![CDATA[
		if (isset($this->request->get['filter_name'])) {
			$url .= '&filter_name=' . urlencode(html_entity_decode($this->request->get['filter_name'], ENT_QUOTES, 'UTF-8'));
		}

		if (isset($this->request->get['filter_author'])) {
			$url .= '&filter_author=' . urlencode(html_entity_decode($this->request->get['filter_author'], ENT_QUOTES, 'UTF-8'));
		}

		if (isset($this->request->get['filter_xml'])) {
			$url .= '&filter_xml=' . urlencode(html_entity_decode($this->request->get['filter_xml'], ENT_QUOTES, 'UTF-8'));
		}
			]]></add>
		</operation>
		<operation>
			<search index="0"><![CDATA[$data['clear_log'] =]]></search>
			<add position="before"><![CDATA[
			$data['filter_name'] = $filter_name;
			$data['filter_author'] = $filter_author;
			$data['filter_xml'] = $filter_xml;
			$data['modified_files'] = array();
			$modified_files = self::modifiedFiles(DIR_MODIFICATION);
			$filter = array();
			$filter['sort'] = 'name';
			$filter['order'] = 'ASC';
			$modification_files = $this->getModificationXmlFiles($filter);
			foreach($modified_files as $modified_file) {
				if(isset($modification_files[$modified_file])){
					$modifications = $modification_files[$modified_file];
				} else {
					$modifications = array();
				}
				$data['modified_files'][] = array(
					'file' => $modified_file,
					'modifications' => $modifications,
					'download' => $this->url->link('marketplace/modification/download', 'user_token=' . $this->session->data['user_token'] . '&file=' . $modified_file . $url, true)
				);
			}
			$error_file = DIR_LOGS . 'ocmod_error.log';
			if (file_exists($error_file)) {
				$data['error_log'] = htmlentities(file_get_contents($error_file, FILE_USE_INCLUDE_PATH, null));
			} else {
				$data['error_log'] = '';
			}
			]]></add>
		</operation>
		<operation>
			<search index="0"><![CDATA[$this->response->setOutput($this->load->view('marketplace/modification', $data));]]></search>
			<add position="replace"><![CDATA[$this->response->setOutput($this->load->view('extension/module/modification_manager/list', $data));]]></add>
		</operation>
		<operation>
			<search index="0"><![CDATA[$this->response->redirect($this->url->link(!empty($data['redirect']) ? $data['redirect'] : 'marketplace/modification']]></search>
			<add position="before"><![CDATA[
			$url = $this->getListUrlParams();
			if (!empty($data['redirect'])) {
				$redirect = $data['redirect'];
			} elseif (!empty($this->request->get['redirect'])) {
				$redirect = $this->request->get['redirect'];
			} else {
				$redirect = 'marketplace/modification';
			}
			]]></add>
		</operation>
		<operation>
			<search index="0"><![CDATA[$this->response->redirect($this->url->link(!empty($data['redirect']) ? $data['redirect'] : 'marketplace/modification']]></search>
			<add position="replace"><![CDATA[$this->response->redirect($this->url->link($redirect]]></add>
		</operation>
		<operation>
			<search index="0"><![CDATA[if ($this->validate()) {]]></search>
			<add position="after"><![CDATA[
			$error_log = array();
			$vqmod_path = substr(DIR_SYSTEM, 0, -7) . 'vqmod/';
			if (file_exists($vqmod_path)) {
				$vqmod_cache = glob($vqmod_path.'vqcache/vq*');
				if ($vqmod_cache) {
					foreach ($vqmod_cache as $file) {
						if (file_exists($file)) {
							@unlink($file);
						}
					}
				}
				if (file_exists($vqmod_path.'mods.cache')) {
					@unlink($vqmod_path.'mods.cache');
				}
				if (file_exists($vqmod_path.'checked.cache')) {
					@unlink($vqmod_path.'checked.cache');
				}
			}
			]]></add>
		</operation>
		<operation>
			<search index="0"><![CDATA[$log[] = 'MOD:]]></search>
			<add position="after"><![CDATA[
				$error_log_mod = 'MOD: ' . $dom->getElementsByTagName('name')->item(0)->textContent;
			]]></add>
		</operation>
		<operation>
			<search index="0"><![CDATA[$operations = $file->getElementsByTagName('operation');]]></search>
			<add position="after"><![CDATA[
			$file_error = $file->getAttribute('error');
			]]></add>
		</operation>
		<operation>
			<search index="0"><![CDATA[$files = glob($path, GLOB_BRACE);]]></search>
			<add position="after"><![CDATA[
			if (!$files) {
				if ($file_error != 'skip') {
					$error_log[] = '----------------------------------------------------------------';
					$error_log[] = $error_log_mod;
					$error_log[] = 'MISSING FILE!';
					$error_log[] = $path;
				}
			}
			]]></add>
		</operation>
		<operation>
			<search index="0"><![CDATA[if (!$status) {]]></search>
			<add position="after"><![CDATA[
							if ($error != 'skip') {
								$error_log[] = "\n";
								$error_log[] = $error_log_mod;
								$error_log[] = 'NOT FOUND!';
								$error_log[] = 'CODE: ' . $search;
								$error_log[] = 'FILE: ' . $key;
							}
			]]></add>
		</operation>
		<operation>
			<search index="0"><![CDATA[$ocmod->write(implode("\n", $log));]]></search>
			<add position="after"><![CDATA[
			if ($error_log) {
				$ocmod = new Log('ocmod_error.log');
				$ocmod->write(implode("\n", $error_log));
			}
			]]></add>
		</operation>
		<operation>
			<search><![CDATA[$this->load->language('marketplace/modification');]]></search>
			<add position="after"><![CDATA[
		$this->load->language('extension/module/modification_manager');
			]]></add>
		</operation>
		<operation>
			<search><![CDATA[$this->model_setting_modification->]]></search>
			<add position="replace"><![CDATA[$this->model_extension_module_modification_manager->]]></add>
		</operation>
		<operation>
			<search><![CDATA[$this->model_extension_module_modification_manager->UpdateSorter]]></search>
			<add position="replace"><![CDATA[$this->model_setting_modification->UpdateSorter]]></add>
		</operation>
		<operation>
			<search><![CDATA['date_added'      => date($this->language->get('date_format_short'), strtotime($result['date_added'])),]]></search>
			<add position="replace"><![CDATA['date_added'      => date($this->language->get('datetime_format'), strtotime($result['date_added'])),]]></add>
		</operation>

	</file>

	<file path="admin/language/en-gb/extension/module/modification_manager.php">
		<operation>
			<search><![CDATA[$_['text_add'] = 'Add Modification';]]></search>
			<add position="before"><![CDATA[
// Text
$_['column_sort_order'] = "Order";
$_['sort_warning']     	= "OCMOD execution order has been changed. Do not forget to refresh the modifications' cache to apply changes!";
			]]></add>
		</operation>
	</file>
	<!-- END OF Admin - Extensions - Modification Manager -->

</modification>
